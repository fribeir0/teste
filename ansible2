---
- name: Configurar Servidor Cliente (Update, Docker, Git e Registro no HAProxy) - Debian 13
  hosts: cliente
  become: yes
  remote_user: adminsenai@134

  vars:
    haproxy_api_url: "http://haproxy.upgrid.local:5555/v2/services/haproxy/configuration/servers"
    haproxy_api_user: "admin"
    haproxy_api_pass: "senai@134"

  tasks:

    - name: 1.1 - Atualizar o cache de pacotes
      apt:
        update_cache: yes
      tags: [update]

    - name: 1.2 - Atualizar todos os pacotes do sistema
      apt:
        upgrade: dist
      tags: [update]

    - name: 2.1 - Instalar o Git
      apt:
        name: git
        state: present
      tags: [git]
    - name: 3.1 - Instalar pacotes de pré-requisito para o Docker
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: present
      tags: [docker]

    - name: 3.2 - Baixar e salvar a chave GPG oficial do Docker
      ansible.builtin.get_url:
        url: https://download.docker.com/linux/debian/gpg
        dest: /usr/share/keyrings/docker-archive-keyring.gpg
        mode: '0644'
      tags: [docker]

    - name: 3.3 - Adicionar o repositório do Docker ao sistema
      ansible.builtin.apt_repository:
        repo: "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian {{ ansible_distribution_release }} stable"
        state: present
        filename: docker
      tags: [docker]

    - name: 3.4 - Instalar o Docker Engine, CLI e Compose
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-compose-plugin
        state: present
        update_cache: yes
      tags: [docker]

    - name: 3.5 - Garantir que o serviço do Docker esteja iniciado e habilitado
      service:
        name: docker
        state: started
        enabled: yes
      tags: [docker]

    - name: 3.6 - Adicionar o usuário remoto ao grupo docker
      user:
        name: "{{ remote_user | default(ansible_user_id) }}"
        groups: docker
        append: yes
      tags: [docker]

    - name: 4.1 - Obter IP local do cliente
      command: hostname -I
      register: client_ip_raw
      changed_when: false

    - set_fact:
        client_ip: "{{ client_ip_raw.stdout.split()[0] }}"

    - name: 4.2 - Registrar cliente no HAProxy via API
      uri:
        url: "{{ haproxy_api_url }}"
        method: POST
        user: "{{ haproxy_api_user }}"
        password: "{{ haproxy_api_pass }}"
        force_basic_auth: yes
        headers:
          Content-Type: "application/json"
        body_format: json
        body:
          name: "client-{{ ansible_hostname }}"
          address: "{{ client_ip }}"
          port: 80
          check: true
          backend: "{{ haproxy_backend_name }}"
      register: haproxy_response
      ignore_errors: yes
      tags: [haproxy-register]

    - name: 4.3 - Mostrar resultado do registro no HAProxy
      debug:
        msg: "Cliente {{ ansible_hostname }} registrado no HAProxy com IP {{ client_ip }}. Resposta: {{ haproxy_response.status }}"
      tags: [haproxy-register]
