---
- name: Configurar Servidor Cliente (Update, Docker, Git e Registro na API) - Debian 13
  hosts: localhost
  remote_user: root

  vars:
    register_api_host: "haproxy.upgrid.local"
    register_api_port: 5000
    register_api_path: "/register"
    register_api_url: "http://{{ register_api_host }}:{{ register_api_port }}{{ register_api_path }}"

  tasks:

    - name: 1.1 - Atualizar o cache de pacotes
      apt:
        update_cache: yes
      tags: [update]

    - name: 1.2 - Atualizar todos os pacotes do sistema
      apt:
        upgrade: dist
      tags: [update]

    - name: 2.1 - Instalar o Git
      apt:
        name: git
        state: present
      tags: [git]

    - name: 3.1 - Instalar pacotes de pré-requisito para o Docker
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: present
      tags: [docker]

    - name: 3.2 - Adicionar chave GPG oficial do Docker (convertida)
      shell: |
        curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
      args:
        creates: /usr/share/keyrings/docker-archive-keyring.gpg
      tags: [docker]

    - name: 3.3 - Adicionar o repositório do Docker ao sistema
      apt_repository:
        repo: "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian {{ ansible_distribution_release }} stable"
        state: present
        filename: docker
      tags: [docker]

    - name: 3.4 - Instalar o Docker Engine, CLI e Compose
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-compose-plugin
        state: present
        update_cache: yes
      tags: [docker]

    - name: 3.5 - Garantir que o serviço do Docker esteja iniciado e habilitado
      service:
        name: docker
        state: started
        enabled: yes
      tags: [docker]

    - name: 3.6 - Adicionar o usuário atual ao grupo docker
      user:
        name: "{{ ansible_user_id }}"
        groups: docker
        append: yes
      tags: [docker]

    - name: 4.1 - Obter IP local do cliente
      command: hostname -I
      register: client_ip_raw
      changed_when: false

    - name: 4.2 - Definir IP processado
      set_fact:
        client_ip: "{{ client_ip_raw.stdout.split()[0] }}"

    - name: 4.3 - Registrar cliente na API de register
      uri:
        url: "{{ register_api_url }}"
        method: POST
        headers:
          Content-Type: "application/json"
        body_format: json
        body: "{{ payload }}"
        timeout: 10
        return_content: yes
        status_code: 200,201,202,204
        use_proxy: no
      register: register_response
      until: register_response.status is defined and register_response.status in [200,201,202,204]
      retries: 4
      delay: 5
      ignore_errors: yes
      tags: [register-api]

    - name: 4.4 - Mostrar resultado do registro na API
      debug:
        msg: >-
          Cliente {{ ansible_hostname }} registrado na API com IP {{ client_ip }}.
          Resposta HTTP: {{ register_response.status | default('Falha na conexão com a API') }}
      tags: [register-api]
