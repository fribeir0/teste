---
- name: Configurar Servidor Cliente (Update, Docker, Git e Registro na API) - Debian 13
  hosts: localhost
  remote_user: root

  vars:
    register_api_host: "haproxy.upgrid.local"
    register_api_port: 5000
    register_api_path: "/register"
    register_api_url: "http://{{ register_api_host }}:{{ register_api_port }}{{ register_api_path }}"

  tasks:

    - name: 1.1 - Atualizar o cache de pacotes
      apt:
        update_cache: yes
      tags: [update]

    - name: 1.2 - Atualizar todos os pacotes do sistema
      apt:
        upgrade: dist
      tags: [update]

    - name: 2.1 - Instalar o Git
      apt:
        name: git
        state: present
      tags: [git]

    - name: 3.1 - Instalar pacotes de pré-requisito para o Docker
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: present
      tags: [docker]

    - name: 3.2 - Baixar e salvar a chave GPG oficial do Docker
      get_url:
        url: https://download.docker.com/linux/debian/gpg
        dest: /usr/share/keyrings/docker-archive-keyring.gpg
        mode: '0644'
      tags: [docker]

    - name: 3.3 - Adicionar o repositório do Docker ao sistema
      apt_repository:
        repo: "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian {{ ansible_distribution_release }} stable"
        state: present
        filename: docker
      tags: [docker]

    - name: 3.4 - Instalar o Docker Engine, CLI e Compose
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-compose-plugin
        state: present
        update_cache: yes
      tags: [docker]

    - name: 3.5 - Garantir que o serviço do Docker esteja iniciado e habilitado
      service:
        name: docker
        state: started
        enabled: yes
      tags: [docker]

    - name: 3.6 - Adicionar o usuário remoto ao grupo docker
      user:
        name: "{{ remote_user | default(ansible_user_id) }}"
        groups: docker
        append: yes
      tags: [docker]

    - name: 4.1 - Obter IP local do cliente
      command: hostname -I
      register: client_ip_raw
      changed_when: false

    - set_fact:
        client_ip: "{{ client_ip_raw.stdout.split()[0] | default('127.0.0.1') }}"

    ########################################################
    # Checagens prévias de resolução e porta TCP           #
    ########################################################
    - name: 4.1.2 - Checar resolução DNS para {{ register_api_host }}
      command: getent hosts {{ register_api_host }}
      register: getent_out
      changed_when: false
      failed_when: false
      tags: [register-api, debug]

    - name: 4.1.3 - Mostrar resultado da resolução DNS
      debug:
        msg:
          - "getent stdout: {{ getent_out.stdout | default('') }}"
          - "getent rc: {{ getent_out.rc }}"
      tags: [register-api, debug]

    - name: 4.1.4 - Verificar conectividade TCP na porta {{ register_api_port }}
      wait_for:
        host: "{{ register_api_host }}"
        port: "{{ register_api_port }}"
        timeout: 6
        state: started
      register: wait_for_result
      failed_when: false
      tags: [register-api, debug]

    - name: 4.1.5 - Mostrar resultado do wait_for
      debug:
        msg:
          - "wait_for result: {{ wait_for_result }}"
      tags: [register-api, debug]

    ########################################################
    # Registro na API - com retries e debug detalhado      #
    ########################################################
    - name: 4.2 - Registrar cliente na API de register (tentativas até sucesso)
      vars:
        payload:
          name: "{{ ansible_hostname }}"
          ip: "{{ client_ip }}"
          port: 80
          backend: "bk_web_apps"
      uri:
        url: "{{ register_api_url }}"
        method: POST
        headers:
          Content-Type: "application/json"
        body_format: json
        body: "{{ payload }}"
        timeout: 10
        return_content: yes
        status_code: 200,201,202,204
        use_proxy: no
      register: register_response
      until: register_response.status is defined and register_response.status in [200,201,202,204]
      retries: 4
      delay: 5
      ignore_errors: yes
      tags: [register-api]

    - name: 4.3 - Mostrar resultado do registro na API (detalhado)
      debug:
        msg:
          - "URL: {{ register_api_url }}"
          - "Payload: {{ {'name': ansible_hostname, 'ip': client_ip, 'port': 80, 'backend': 'bk_web_apps'} }}"
          - "HTTP status: {{ register_response.status | default('no-status') }}"
          - "Content: {{ register_response.content | default('no-content') }}"
          - "Failed: {{ register_response.failed | default(False) }}"
          - "Msg (quando presente): {{ register_response.msg | default('') }}"
      tags: [register-api, debug]

    - name: 4.4 - Se houve falha, coletar diagnóstico com curl (do host cliente)
      command: >
        curl -sS -D - -o /tmp/register_curl_out.txt -X POST
        -H "Content-Type: application/json"
        -d '{{ {"name": ansible_hostname, "ip": client_ip, "port": 80, "backend":"bk_web_apps"} | to_json }}'
        {{ register_api_url }}
      register: curl_diag
      failed_when: false
      when: register_response is defined and (register_response.status is not defined or register_response.status not in [200,201,202,204])
      tags: [register-api, debug]

    - name: 4.5 - Mostrar saída do curl de diagnóstico (se executado)
      command: cat /tmp/register_curl_out.txt
      register: curl_out_file
      changed_when: false
      failed_when: false
      when: curl_diag is defined and curl_diag.rc == 0
      tags: [register-api, debug]

    - name: 4.6 - Mostrar resultado final resumido e falha explícita se necessário
      block:
        - debug:
            msg: "Cliente {{ ansible_hostname }} registrado com sucesso na API (HTTP {{ register_response.status }})"
        - meta: noop
      rescue:
        - debug:
            msg:
              - "Registro falhou. Veja os passos de diagnóstico anteriores (getent, wait_for, curl)."
              - "Se getent não resolver, corrija DNS no seu ambiente (servidor DHCP/DNS, etc)."
              - "Se wait_for informou que a porta não está aberta, verifique o serviço da API no host {{ register_api_host }} e firewall."
      tags: [register-api]
